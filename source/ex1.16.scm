(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((iseven? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))
        )
  )
(define (square x) (* x x))
(define (iseven? n)
  (= (remainder n 2) 0)
  )
(define (fast-expt-iter a b n)
  (if (= n 0)
      a
    (if (iseven? n)
        (fast-expt-iter a (square b) (/ n 2))
      (fast-expt-iter (* a b) b (- n 1))
      )
    )
  )
(define (fast b n)
  (fast-expt-iter 1 b n)
  )

(fast 2 10)
