(define (add-complex z1 z2)
  (make-from-real-imag (+ (real-partc z1) (real-partc z2)) (+ (imag-partc z1) (imag-partc z2)))
  )
(define (sub-complex z1 z2)
  (make-from-real-imag (- (real-partc z1) (real-partc)) (- (imag-partc z1) (imag-partc z2)))
  )
(define (mul-complex z1 z2)
  (make-from-mag-ang (* (magnitudec z1) (magnitudec z2))
                     (+ (anglec z1) (anglec z2))
                     )
  )
(define (div-complex z1 z2) 
  (make-from-mag-ang (/ (magnitudec z1) (magnitudec z2)) 
                     (- (anglec z1) (anglec z2))
                     )
  )
(define (real-partc z) (car z))
(define (imag-partc z) (cdr z))
(define (magnitudec z) 
  (define (square a) (* a a))
  (sqrt (+ (square (real-partc z)) (square (imag-partc z))))
  )
(define (anglec z)
  (atan (imag-partc z) (real-partc z))
  )
(define (make-from-real-imag x y) (cons x y))
(define (make-from-mag-ang r a)
  (cons (* r (cos a)) (* r (sin a)))
  )

(define (attach-tag type-tag contents)
  (cons type-tag contents)
  )

(define (type-tag datum)
  (if (pair? datum)
    (car datum)
    (error "bad tagged datum -- Type-Tag" datum)
    )
  )
(define (contents datum)
  (if (pair? datum)
    (cdr datum)
    (error "bad tagged datum -- type-tag" datum)
    )
  )

(define (install-rectangular-package)
  ;;internal procedures
  (define (real-partb z) (car z))
  (define (imag-partb z) (cdr z))
  (define (make-from-real-imag x y) 
    (cons x y)
    )
  (define (magnitudeb z)
    (define (square a) (* a a))
    (sqrt (+ (square (real-partb z)) 
             (square (imag-partb z))
             ))
    )
  (define (angleb z)
    (atan (imag-partb z) (real-partb z))
    )
  (define (make-from-mag-ang r a)
    (cons (* r (cos a)) (* r (sin a)))
    )
  ;;interface to the rest of the system
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-partb '(rectangular) real-partb)
  (put 'imag-partb '(rectangular) imag-partb)
  )

(define (make-from-mag-ang x y))
