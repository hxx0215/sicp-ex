(define (deriv expe var)
  (cond ((number? expe) 0)
        ((variable? expe)
         (if (same-variable? expe var) 1 0)
         )
        ((sum? expe)
         (make-sum (deriv (addend expe) var)
                   (deriv (augend expe) var)
                   )
         )
        ((product? expe)
         (make-sum (make-product (multiplier expe)
                                 (deriv (multiplicand expe) var)
                                 )
                   (make-product (deriv (multiplier expe) var)
                                 (multiplicand expe)
                                 )
                   )
         )
        ((exponentation? expe)
         (make-product (make-product (exponent expe) (make-exponentiation (base expe) (- (exponent expe) 1))) (deriv (base expe) var))
         )
        (else (
               error "unkown exp"
               ))
        )
  )
(define (variable? x) (symbol? x))
(define (same-variable? a b)
  (and (variable? a) (variable? b) (eq? a b))
  )
(define (make-sum a1 a2) 
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2)
         )
        (else (list '+ a1 a2))
        )
  )
(define (=number? expe num)
  (and (number? expe) (= expe num))
  )
(define (make-product m1 m2) 
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))
        )
  )
(define (sum? x)
  (and (pair? x) (eq? (car x) '+))
  )
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? x)
  (and (pair? x) (eq? (car x) '*))
  )
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))
(define (make-exponentiation base exponent)
  (cond ((=number? exponent 0) 1)
        ((=number? exponent 1) base)
        ((and (number? base) (number? exponent))(exp base exponent))
        (else (list '** base exponent))
        )
  )
(define (base ex) (cadr ex))
(define (exponent ex) (caddr ex))
(define (exponentation? ex)
  (and (pair? ex) (eq? (car ex) '**))
  )

(deriv '(** x 3) 'x)
