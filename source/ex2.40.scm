(define (enumerate-interval low high)
  (if (> low high)
     '() 
    (cons low (enumerate-interval (+ low 1) high))
    )
  )

(define (fold-right op initial lst)
  (if (null? lst)
    initial
    (op (car lst)
        (fold-right op initial (cdr lst))
        )
    )
  )
(define (flatmap proc seq)
  (fold-right append '() (map proc seq))
  )
(define (unique-pairs n)
  (flatmap (lambda (i)
             (map (lambda (j)
                    (list i j)
                    )
                  (enumerate-interval 1 (- i 1))
                  )
             )
           (enumerate-interval 1 n)
           )
  )

(unique-pairs 6)

(define (prime-sum-pairs n)
  (map make-pair-sum (
                      filter prime-sum? (unique-pairs n)
                      ) )
  )
