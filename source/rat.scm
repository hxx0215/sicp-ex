(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x))
               ) 
            (* (denom x) (denom y))
            ))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x))
               ) 
            (* (denom x) (denom y))
            ))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))
            )
  )
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))
            )
  )
(define (eqal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))
     )
  )
(define (make-rat n d) 
  (let ((g (gcd n d)))
    (if (> (* n d) 0)
        (cons (/ (abs n) g) (/ (abs d) g))
        (cons (/ (abs n) (* -1.0 g)) (/ (abs d) g))
      )
    )
  )
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x))
  )
